name: Benchmarks

inputs:
  cpu-label:
    description: "Runner's CPU label"
    required: true
  mem-label:
    description: "Amount of RAM the runner has"
    required: true
  cuda:
    description: "Whether the runner uses CUDA for compute"
    default: false
    type: boolean
    required: false
  token:
    description: "GitHub runner token"
    required: true

runs:
  using: composite
  steps:
    - run: echo "Running on ${{ inputs.cpu-label }} - ${{ inputs.mem-label }} - ${{ inputs.cuda }}"
      shell: bash
    - uses: actions/checkout@v4
    - uses: software-mansion/setup-scarb@v1
      with:
        scarb-version: "2.4.2"
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-2024-01-16
        override: true
        components: rustfmt, clippy
    - uses: baptiste0928/cargo-install@v1
      with:
        crate: cargo-nextest
        locked: true
    - name: Cargo clean
      shell: bash
      run: cargo clean
    - name: Delete Cargo.lock
      shell: bash
      run: rm -f Cargo.lock
    - name: Install Risc0 toolchain
      shell: bash
      run: |
        cargo install cargo-binstall
        cargo binstall cargo-risczero --no-confirm
        cargo risczero install
    - name: Install Rust jupyter kernel
      shell: bash
      run: |
        cargo install evcxr_jupyter
        evcxr_jupyter --install
    - name: Install GNU Time, Jq, and OpenSSL
      shell: bash
      if: ${{ inputs.cpu-label != "M1"}}
      run: sudo apt-get update && sudo apt-get install -y openssl libssl-dev jq time
    - name: Build ZKML
      shell: bash
      run: cargo build --release
      working-directory: ./src/zkml
    - name: Download and Install EZKL Binary
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/zkonduit/ezkl/main/install_ezkl_cli.sh | bash
        sudo mv ${XDG_CONFIG_HOME:-$HOME}/.ezkl/ezkl /usr/local/bin/
        export ENABLE_ICICLE_GPU=${{ inputs.cuda == 'true' }}
        ezkl --version
    - name: Setup Virtual Env
      shell: bash
      run: python -m venv .env; source .env/bin/activate;
    - name: Run linear regression benchmarks across all frameworks
      shell: bash
      run: source .env/bin/activate; cargo nextest run benchmarking_tests::tests::run_benchmarks_::tests_0 --test-threads 1
    - name: Run random forest benchmarks across all frameworks
      shell: bash
      run: source .env/bin/activate; cargo nextest run benchmarking_tests::tests::run_benchmarks_::tests_1 --test-threads 1
    - name: Run svm classification benchmarks across all frameworks
      shell: bash
      run: source .env/bin/activate; cargo nextest run benchmarking_tests::tests::run_benchmarks_::tests_2 --test-threads 1
    - name: Run tree ensemble regression benchmarks across all frameworks
      shell: bash
      run: source .env/bin/activate; cargo nextest run benchmarking_tests::tests::run_benchmarks_::tests_3 --test-threads 1
    - name: Pretty Print benchmarks.json
      shell: bash
      run: jq '.' benchmarks.json > '${{ inputs.cpu-label }}-${{ inputs.mem-label }}-${{ inputs.cuda }}.json'
    - name: Commit ${{ inputs.cpu-label }}-${{ inputs.mem-label }}-${{ inputs.cuda }}.json
      shell: bash
      run: |
        git config --global user.email "actions@inferencelabs.com"
        git config --global user.name "GitHub Actions"
        git add "${{ inputs.cpu-label }}-${{ inputs.mem-label }}-${{ inputs.cuda }}.json"
        # Only commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes in ${{ inputs.cpu-label }}-${{ inputs.mem-label }}-${{ inputs.cuda }}.json"
        else
          git commit -m "Update ${{ inputs.cpu-label }}-${{ inputs.mem-label }}-${{ inputs.cuda }}.json"
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
